#include <iostream>

int main()
{
	// 바이트의 저장방식
	// 리틀엔디안, 빅엔디안 
	// 리틀엔디안 : 낮은주소의 데이터에 낮은 바이트부터 저장한다. 
	// 빅엔디안   : 낮은주소의 데이터에 높은 바이트부터 저장한다. ( 사람이 주로 사용하는 선형방식 ) 

	int iTest = 1;

	// 아래 포인터변수를 형변환하여 char* 타입 변수에 저장하고
	// 포인터연산을 사용하여 1바이트씩 메모리를 확인하게 되면 낮은 주소의 메모리에 1의 값이 저장되게 된다. 
	int* pTest = &iTest;
	char* pCast = (char*)pTest;

	// 포인터연산을 활용한 주소값 이동으로 확인 
	// 0b 00000000 00000000 00000000 00000001 
	// 예상대로라면 이 값이 순서대로 저장되어 각각 0 , 0 , 0 , 1 이 저장되어야 한다고 생각이 든다. 
	// 하지만 실제 저장되는 값은  1, 0 , 0, 0 이다. 
	int Test1 = *(pCast + 0);
	int Test2 = *(pCast + 1);
	int Test3 = *(pCast + 2);
	int Test4 = *(pCast + 3);

	// 이유는 데이터를 주고받는 방식이 리틀엔디안 방식이기 때문이다. 
	// 리틀엔디아능로 저장하는 이유는 컴퓨터의 계산에 더 유리하기 때문이다. 
	
	// 빅엔디안 방식이라면 사람이 보는 방식인 선형방식으로
	// 0b 00000000 00000000 00000000 00000001 로 저장이 될 것이다. 

	
	return 0;

















	// 분기문 , 반복문 저장용 

	// 분기문 if 
	// 조건식에 변수(메모리영역) 을 입력하고
	// 조건식이 true 라면 if문의 코드블록의 코드를 실행, false 라면 코드를 실행하지 않는다. 
	// if 문만 단독으로 사용이 가능하다. 
	if (true)
	{

	}

	// 위 if 문이 거짓이었을 경우, 조건문을 체크하여 true 라면 코드실행, false 라면 실행하지 않는다.
	// else if 의 경우 단독사용이 불가능하다. 
	else if (true)
	{

	}

	// 위쪽의 if문 코드가 모두 false 였을 경우 코드블록의 코드를 실행한다. 
	// 마찬가지로 단독사용은 불가능하다. 
	else
	{

	}

	// switch 문
	// 조건문에는 상수가 들어가며 case 의 값과 비교하여 서로 동일한 값이라면 코드를 실행한다. 
	// 여기서 상수는 메모리영역이 상수인 것을 뜻한다. 
	// ex ) int Test = 200; 이라면 Test 변수도 입력 가능 
	// 코드가 실행되고나서 break; 키워드를 만나면 switch 문을 빠져나가게 되며
	// break; 키워드를 입력하지 않았을 경우 아래 코드도 실행될 수 있으니 주의하여 사용해야 한다.
	switch (100)
	{
	case 200:
		break;

	case 100:
		break;

		// 위 case 가 모두 실행되지 않았다면 실행되는 키워드
		// switch 문 내부에서 변수를 선언하려면 반드시 코드블록에 감싸주어야 한다. 
	default:
	{
		int a = 0;
		std::cout << "위 case 들이 실행되지 않았다면 얘가 실행된다." << std::endl;
	}
		break;
	}

		
	// 반복문 
	// for 문
	
	// 아래와 같은 형태로 사용한다. 현재 size_t 변수를 배우지 않았기 때문에 int로 대체 
	// int i = 0; <-- 초기화문
	// i < 10;    <-- 조건문
	// ++i        <-- 증감문
	// 조건을 체크하여 조건을 만족한다면 코드블록을 실행하고 
	// 증감문으로 와서 값을 증감시켜 준뒤, 조건문을 체크하여 코드를 실행한다.

	// 초기화문 -> 조건문 -> 코드실행 - > 증감문 -> 조건문 -> 코드실행 -> 증감문 -> 조건문 -> 코드실행의 형태 
	// 조건을 만족하지 않을 경우 코드가 종료된다. 

	int TestArray[10] = {};
	for (int i = 0; i < 10; ++i)
	{
		TestArray[i] = i + 1;
		std::cout << TestArray[i] << std::endl;
	}

	// 위와 같은 코드를 실행하게 될 경우 1~10 까지의 값이 순서대로 출력되며 10까지 출력된 이후에 
	// 조건을 만족하지 않기 때문에 for 문이 종료되게 된다. 


	// while 문
	// 조건문이 true 라면 코드가 실행되고 false 라면 실행되지 않는다. 
	// 단, 코드가 실행되었다면 반복문을 빠져나오는 코드를 작성하지 않을 경우 무한히 동작하게 된다. 
	int Test = 10;
	while (0 != Test)
	{
		// 실행되었다면 코드가 무한히 동작하기 때문에
		// 반복문을 빠져나갈 수 있도록 코드를 작성한다. 
		// 이런 형태로 작성하게 되면 Test 의 값이 0이 되면 조건을 만족하지 않기 때문에
		// while 문이 종료된다. 
		--Test;
	}
	
	// do while 문 
	// while 문과 조금 다른 형태이다.
	// 실행코드가 반드시 한번 동작한 후에 조건 체크를 하게 된다. 

	do
	{
		// 반드시 코드가 한번은 실행되고 이후 조건체크를 한다.
		std::cout << "do while" << std::endl;

	} while (true);





	return 0;
}